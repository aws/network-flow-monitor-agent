name: Load Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  load-tests:
    runs-on: ubuntu-22.04 # 24.04 has GLIBC 2.39, if agent is built with that with dynamic linking it wont run in AL2023 which do not have it
    timeout-minutes: 90
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: write   # This is required for pushing graphs to PR branch
      pull-requests: write  # This is required for commenting on PRs
    env:
      GRAPH_ID: pr-${{ github.event.number || github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install sh matplotlib
          python3 -c "import sh; print('sh module installed successfully')"
          python3 -c "import matplotlib; print('matplotlib module installed successfully')"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build agent
        run: cargo build --release

      - name: Build tcp-tester
        run: |
          cargo build --release --package tcp-tester

      - name: Configure AWS credentials
        id: aws-creds
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: ${{ secrets.PR_PERF_TEST_AWS_ROLE_ARN }}
          aws-region: ${{ secrets.PR_PERF_TEST_AWS_REGION }}
          mask-aws-account-id: true

      - name: Create EC2 instances
        if: steps.aws-creds.outcome == 'success'
        run: |
          cd load-generator
          chmod +x bin/*
          bin/create-instances --region ${{ secrets.PR_PERF_TEST_AWS_REGION }} --instance-role ${{ secrets.PR_PERF_TEST_INSTANCE_ROLE }}

      - name: Run Performance tests on EC2 instances
        if: steps.aws-creds.outcome == 'success'
        run: |
          cd load-generator
          bin/invoke_test --bucket ${{ secrets.PR_PERF_TEST_BUCKET }} --region ${{ secrets.PR_PERF_TEST_AWS_REGION }} --graph_identifier $GRAPH_ID

      - name: Upload performance results
        if: steps.aws-creds.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ env.GRAPH_ID }}
          path: |
            load-generator/results-${{ env.GRAPH_ID }}/graphs/*.png
            load-generator/results-${{ env.GRAPH_ID }}/*_tps-report.json
          retention-days: 90

      - name: Download baseline performance reports
        if: steps.aws-creds.outcome == 'success' && github.event_name == 'pull_request'
        run: |
          cd load-generator
          # Try to download baseline reports from main branch
          mkdir -p baseline-reports
          git show main:load-generator/baseline-reports/ > /dev/null 2>&1 && \
            git archive main:load-generator/baseline-reports | tar -x -C baseline-reports/ || \
            echo "No baseline reports found in main branch"

      - name: Generate performance comparison
        if: steps.aws-creds.outcome == 'success' && github.event_name == 'pull_request'
        run: |
          cd load-generator
          chmod +x bin/compare-performance
          bin/compare-performance --current-dir results-${{ env.GRAPH_ID }} --baseline-dir baseline-reports > performance-comparison.md || \
            echo "# Performance Comparison\n\nNo baseline reports available for comparison." > performance-comparison.md

      - name: Upload graphs and comment PR
        if: steps.aws-creds.outcome == 'success' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get list of generated graphs
            const graphId = '${{ env.GRAPH_ID }}';
            const graphsDir = `load-generator/results-${graphId}/graphs`;
            const graphs = fs.readdirSync(graphsDir).filter(f => f.endsWith('.png'));

            // Read performance comparison
            const comparison = fs.readFileSync('load-generator/performance-comparison.md', 'utf8');

            // Create comment with embedded graph images
            let comment = '## ðŸ“Š Performance Test Results\n\n';
            comment += `Performance tests completed successfully! Generated ${graphs.length} performance graphs.\n\n`;

            // Create gh-perf-images branch if it doesn't exist
            let branchExists = true;
            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'gh-perf-images'
              });
            } catch (error) {
              if (error.status === 404) {
                branchExists = false;
                console.log('Creating gh-perf-images branch...');
                const mainRef = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/main'
                });
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'refs/heads/gh-perf-images',
                  sha: mainRef.data.object.sha
                });
              }
            }

            // Upload each graph to GitHub and embed in comment
            for (const graph of graphs) {
              const graphPath = `load-generator/results-${graphId}/graphs/${graph}`;
              const imageBuffer = fs.readFileSync(graphPath);
              const imageBase64 = imageBuffer.toString('base64');

              try {
                const response = await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: `perf-images/pr-${{ github.event.number }}/${graph}`,
                  message: `Add performance graph: ${graph}`,
                  content: imageBase64,
                  branch: 'gh-perf-images'
                });

                const name = graph.replace('.png', '').replace(/-/g, ' ');
                comment += `### ${name}\n![${name}](${response.data.content.download_url})\n\n`;
              } catch (error) {
                console.log(`Failed to upload ${graph}: ${error.message}`);
                const name = graph.replace('.png', '').replace(/-/g, ' ');
                comment += `### ${name}\n_Graph upload failed_\n\n`;
              }
            }

            comment += `\nðŸ“Ž Download the [performance-results-${graphId}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) artifact for reports.\n\n`;
            comment += comparison;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Cleanup EC2 instances
        if: steps.aws-creds.outcome == 'success' && always()
        run: |
          cd load-generator
          bin/cleanup-instances --region ${{ secrets.PR_PERF_TEST_AWS_REGION }}