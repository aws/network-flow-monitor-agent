name: Performance Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  aws-perf-tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    env:
      GRAPH_ID: pr-${{ github.event.number || github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache Rust build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build agent
        run: cargo build --release

      - name: Build tcp-tester
        run: |
          cargo build --release --package tcp-tester

      - name: Configure AWS credentials
        id: aws-creds
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          role-to-assume: ${{ secrets.PR_PERF_TEST_AWS_ROLE_ARN }}
          aws-region: ${{ secrets.PR_PERF_TEST_AWS_REGION }}
          mask-aws-account-id: true

      - name: Create EC2 instances
        if: steps.aws-creds.outcome == 'success'
        run: |
          cd load-generator
          chmod +x bin/*
          bin/create-instances --region ${{ secrets.PR_PERF_TEST_AWS_REGION }}

      - name: Run Performance tests on EC2 instances
        if: steps.aws-creds.outcome == 'success'
        run: |
          cd load-generator
          bin/invoke_test --bucket ${{ secrets.PR_PERF_TEST_BUCKET }} --region ${{ secrets.PR_PERF_TEST_AWS_REGION }} --graph_identifier $GRAPH_ID

      - name: Upload performance graphs
        if: steps.aws-creds.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: performance-graphs-${{ env.GRAPH_ID }}
          path: load-generator/results-${{ env.GRAPH_ID }}/graphs/*.png
          retention-days: 30

      - name: Comment PR with performance results
        if: steps.aws-creds.outcome == 'success' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get list of generated graphs
            const graphId = '${{ env.GRAPH_ID }}';
            const graphsDir = `load-generator/results-${graphId}/graphs`;
            const graphs = fs.readdirSync(graphsDir).filter(f => f.endsWith('.png'));

            // Create comment with graph links
            let comment = '## ðŸ“Š Performance Test Results\n\n';
            comment += `Performance tests completed successfully! Generated ${graphs.length} performance graphs.\n\n`;
            comment += '**Generated Graphs:**\n';
            graphs.forEach(graph => {
              const name = graph.replace('.png', '').replace(/-/g, ' ');
              comment += `- ${name}\n`;
            });
            comment += `\nðŸ“Ž Download the [performance-graphs-${{ env.GRAPH_ID }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) artifact to view the charts.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Cleanup EC2 instances
        if: steps.aws-creds.outcome == 'success' && always()
        run: |
          cd load-generator
          bin/cleanup-instances --region ${{ secrets.PR_PERF_TEST_AWS_REGION }}