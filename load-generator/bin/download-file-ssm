#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

help_msg=$(cat <<EOF
Downloads a file from instances via SSM port forwarding and SCP
Usage: $0 <remote_file_path> [local_file_name]
Examples:
    $0 /var/log/app.log
    $0 /etc/config.json my-config.json
EOF
)

if [[ $# -lt 1 || "$1" == "--help" || "$1" == "-h" ]]; then
    echo "$help_msg"
    exit 0
fi

remote_file="$1"
local_file="${2:-$(basename "$remote_file")}"

# Load the developer's load-test environment variables.
source bin/set-env-vars

for instance_id in $LOAD_TEST_INSTANCE_IDS
do
    printf "\nDownloading $remote_file from instance $instance_id\n"

    # Find available local port
    local_port=$(python3 -c "import socket; s=socket.socket(); s.bind(('',0)); print(s.getsockname()[1]); s.close()")

    # Start port forwarding in background
    aws ssm start-session --target "$instance_id" \
        --document-name AWS-StartPortForwardingSession \
        --parameters "{\"portNumber\":[\"22\"],\"localPortNumber\":[\"$local_port\"]}" &

    session_pid=$!

    # Wait for port forwarding to establish
    sleep 3

    # Download file via SCP
    scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        -P "$local_port" ec2-user@localhost:"$remote_file" "${instance_id}_${local_file}" || \
        echo "Failed to download $remote_file from $instance_id"

    # Clean up port forwarding session
    kill $session_pid 2>/dev/null || true

    echo "Downloaded to ${instance_id}_${local_file}"
done