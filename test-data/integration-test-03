#!/usr/bin/python3

import argparse
import subprocess
import socket
import time
from concurrent.futures import ThreadPoolExecutor
from test_common import (
    start_http_server, send_http_request, find_free_port
)

def main():
    """
    Introduce delay & packet loss on localhost.
    Send a few of http requests to a server hosting on localhost.
    Make sure all are captured by the agent verbatim including errors.
    """
    parser = argparse.ArgumentParser(description='Integration test 02')
    parser.add_argument('--log-path', help='Path to agent log file')
    parser.add_argument('--publish-secs', type=int, help='Publish interval in seconds')
    args = parser.parse_args()

    # send a bit more than normal to have better confidence
    connection_requests = 100
    ip_addr = "127.0.0.1"
    port = find_free_port()
    delay_ms = 10
    loss_percent = 10

    print(f"Setting up network delay: {delay_ms}ms {loss_percent}% loss on interface lo for {ip_addr}")
    result = subprocess.run([
        "./test-context/introduce_loss.sh",
        "--delay", f"{delay_ms}ms",
        "--loss_percent", str(loss_percent),
        "--interface", "lo",
        "--ip_addr", ip_addr,
        "--port", str(port),
        "--enable"
    ])

    # Start an HTTP server and send requests in parallel.
    server = start_http_server(ip_addr, port)
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(send_http_request, ip_addr, port) for _ in range(connection_requests)]
        if not all(future.result() for future in futures):
            exit(1)
    server.shutdown()
    # Run verifier
    success = subprocess.run([
        "report-verifier", "--log-file", args.log_path,
        "--publish-secs", str(args.publish_secs),
        "--expected-connection-count", str(connection_requests),
        "--expected-minimum-latency", f"{delay_ms * 1000 * 2}", # * 2 because delay is two-way (rtt)
        "--expected-loss-percent", f"{loss_percent}",
        "--local-ip-under-test", ip_addr,
        "--local-port-under-test", str(port),
        "--remote-ip-under-test", ip_addr,
        "--remote-port-under-test", str(port),
    ])

    subprocess.run([
        "./test-context/introduce_loss.sh", ip_addr,
        "--interface", "lo",
        "--disable"
    ])

    exit(0 if success.returncode == 0 else 1)

if __name__ == '__main__':
    main()
